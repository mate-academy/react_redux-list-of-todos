{"version":3,"sources":["store.js","api/todos.js","api/users.js","components/User.js","components/TodoItem.js","components/TodoList.js","App.js","index.js"],"names":["sortedField","ACTION_TYPES","loadData","data","type","payload","initialState","isLoading","isReady","getData","dispatch","store","Promise","all","fetch","then","response","json","_ref","_ref2","Object","slicedToArray","listOfTodos","listOfUsers","map","todo","objectSpread2","user","find","id","userId","createStore","state","arguments","length","undefined","action","filter","item","toConsumableArray","reverse","sort","a","b","localeCompare","completed","title","applyMiddleware","thunk","User","props","name","connect","todoList","deleteTodo","todoId","_ref$todo","react_default","createElement","className","checked","readOnly","components_User","onClick","sortData","field","components_TodoItem","key","getTodoList","components_TodoList","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d29ac747.chunk.js","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { getUsers } from './api/users';\nimport { getTodos } from './api/todos';\n\nlet sortedField = 'id';\n\nconst ACTION_TYPES = {\n  ADD_DATA: 'ADD_DATA',\n  LOAD_DATA: 'LOAD_DATA',\n  DELETE_TODO: 'DELETE_TODO',\n  SORT_TODO: 'SORT_TODO',\n};\n\nconst loadData = data => ({\n  type: ACTION_TYPES.LOAD_DATA,\n  payload: data,\n});\n\nexport const addData = data => ({\n  type: ACTION_TYPES.ADD_DATA,\n  payload: data,\n});\n\nexport const deleteTodo = todoId => ({\n  type: ACTION_TYPES.DELETE_TODO,\n  payload: todoId,\n});\n\nexport const sortData = field => ({\n  type: ACTION_TYPES.SORT_TODO,\n  payload: field,\n});\n\nconst initialState = {\n  data: [],\n  isLoading: false,\n  isReady: true,\n};\n\nexport const getData = () => (dispatch) => {\n  store.dispatch(loadData());\n\n  Promise.all([getTodos(), getUsers()])\n    .then(([listOfTodos, listOfUsers]) => dispatch(\n      addData(listOfTodos.map(todo => (\n        {\n          ...todo,\n          user: listOfUsers.find(user => user.id === todo.userId),\n        }\n      ))),\n      store.dispatch(loadData())\n    ));\n};\n\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case ACTION_TYPES.ADD_DATA: {\n      return {\n        ...state,\n        data: action.payload,\n      };\n    }\n\n    case ACTION_TYPES.LOAD_DATA: {\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    }\n\n    case ACTION_TYPES.DELETE_TODO: {\n      return {\n        ...state,\n        data: state.data.filter(item => item.id !== action.payload),\n      };\n    }\n\n    case ACTION_TYPES.SORT_TODO: {\n      switch (action.payload) {\n        case 'name': {\n          if (sortedField === 'name') {\n            return {\n              ...state,\n              data: [...state.data]\n                .reverse(),\n            };\n          }\n          sortedField = 'name';\n\n          return {\n            ...state,\n            data: [...state.data]\n              .sort((a, b) => (a.user[action.payload]\n                .localeCompare(b.user[action.payload])\n              )),\n          };\n        }\n\n        case 'id': {\n          if (sortedField === 'id') {\n            return {\n              ...state,\n              data: [...state.data]\n                .reverse(),\n            };\n          }\n          sortedField = 'id';\n\n          return {\n            ...state,\n            data: [...state.data]\n              .sort((a, b) => (a.id - b.id)),\n          };\n        }\n\n        case 'completed': {\n          if (sortedField === 'completed') {\n            return {\n              ...state,\n              data: [...state.data]\n                .reverse(),\n            };\n          }\n          sortedField = 'completed';\n\n          return {\n            ...state,\n            data: [...state.data]\n              .sort((a, b) => (b.completed - a.completed)),\n          };\n        }\n\n        case 'title': {\n          if (sortedField === 'title') {\n            return {\n              ...state,\n              data: [...state.data]\n                .reverse(),\n            };\n          }\n          sortedField = 'title';\n\n          return {\n            ...state,\n            data: [...state.data]\n              .sort((a, b) => (a.title.localeCompare(b.title)\n              )),\n          };\n        }\n        default: return state;\n      }\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  applyMiddleware(thunk),\n);\n","const todosURL = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const getTodos = () => fetch(todosURL)\n  .then(response => response.json());\n","const usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getUsers = () => fetch(usersURL)\n  .then(response => response.json());\n","const User = props => props.user.name;\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteTodo } from '../store';\nimport User from './User';\n\n// eslint-disable-next-line no-shadow\nconst TodoItem = ({ todo: { user, id, title, completed }, deleteTodo }) => (\n  <tr>\n    <td>{id}</td>\n    <td>{title}</td>\n    <td className=\"todo\">\n      <input type=\"checkbox\" checked={completed} readOnly />\n      <span>\n        {completed ? 'completed' : 'not completed'}\n      </span>\n    </td>\n    <td>\n      <User\n        user={user}\n      />\n    </td>\n    <td>\n      <button\n        type=\"button\"\n        onClick={() => deleteTodo(id)}\n      >\n          X\n      </button>\n    </td>\n  </tr>\n);\n\nconst mapStateToProps = state => ({\n  todoList: state.todoList,\n});\n\nTodoItem.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.oneOfType([PropTypes.object])\n    .isRequired,\n};\n\nexport default connect(mapStateToProps, { deleteTodo })(TodoItem);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { sortData } from '../store';\n\n// eslint-disable-next-line no-shadow\nconst TodoList = ({ data, sortData }) => (\n  <div className=\"App\">\n    <h1 className=\"heading\">\n        Count:\n      {' '}\n      { data.length }\n    </h1>\n    <table>\n      <thead>\n        <tr>\n          <th onClick={() => sortData('id')}>Id</th>\n          <th onClick={() => sortData('title')}>Title</th>\n          <th onClick={() => sortData('completed')}>Completed</th>\n          <th onClick={() => sortData('name')}>Name</th>\n          <th>Delete</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map(todo => (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n\nTodoList.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array])\n    .isRequired,\n  sortData: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = () => ({ data }) => ({ data });\n\nexport default connect(mapStateToProps, { sortData })(TodoList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './style/index.css';\nimport { getData } from './store';\nimport TodoList from './components/TodoList';\n\nconst App = ({ data, isLoading, getTodoList }) => {\n  if (isLoading) {\n    return (\n      <div className=\"loader\">\n        <div className=\"spinner\" />\n      </div>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <div className=\"App\">\n        <h1 className=\"heading\">Redux List of Todos</h1>\n        <button\n          className=\"btn\"\n          type=\"button\"\n          onClick={getTodoList}\n        >\n          Load Todos\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"heading\">Redux List of Todos</h1>\n      <TodoList />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n  isLoading: state.isLoading,\n});\n\nconst mapDispatchToMethod = dispatch => ({\n  getTodoList: () => dispatch(getData()),\n});\n\nApp.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array]).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  getTodoList: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToMethod)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n"],"sourceRoot":""}