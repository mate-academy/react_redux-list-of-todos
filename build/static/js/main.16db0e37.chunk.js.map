{"version":3,"sources":["store.js","User.js","TodoItem.js","ArrsAPI.js","TodoList.js","App.js","index.js"],"names":["store","createStore","state","action","type","Object","objectSpread2","todos","value","isLoading","loaded","error","sortedColumn","User","_ref","user","react_default","a","createElement","Fragment","name","propTypes","PropTypes","string","isRequired","TodoItem","todo","id","title","src_User","completed","getUsers","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getTodos","_context2","getTodosArr","_ref2","users","Promise","all","slicedToArray","map","find","userId","connect","dispatch","setTodos","newTodos","setLoading","changeLoading","setLoaded","changeLoaded","setError","changeError","setSortedColumn","changeSortedColumn","_ref3","loadTodos","readyTodos","t0","sortById","b","sortByTitle","localeCompare","sortbyName","sortByStatus","sortHeader","func","sortedTodos","toConsumableArray","sort","reverse","length","onClick","className","e","target","innerText","src_TodoItem","filter","App","src_TodoList","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.16db0e37.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst SET_TODOS = 'set todos';\nconst CHANGE_LOADING = 'change loading';\nconst CHANGE_LOADED = 'change loaded';\nconst CHANGE_ERROR = 'change error';\nconst CHANGE_SORTEDCOLUMN = 'change sorted column';\n\nexport const createSet = value => ({\n  type: SET_TODOS, value,\n});\nexport const changeLoading = value => ({\n  type: CHANGE_LOADING, value,\n});\nexport const changeLoaded = value => ({\n  type: CHANGE_LOADED, value,\n});\nexport const changeError = value => ({\n  type: CHANGE_ERROR, value,\n});\nexport const changeSortedColumn = value => ({\n  type: CHANGE_SORTEDCOLUMN, value,\n});\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  loaded: false,\n  sortedColumn: 'ID',\n  error: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.value,\n      };\n    case CHANGE_LOADING:\n      return {\n        ...state,\n        isLoading: action.value,\n      };\n    case CHANGE_LOADED:\n      return {\n        ...state,\n        loaded: action.value,\n      };\n    case CHANGE_ERROR:\n      return {\n        ...state,\n        error: action.value,\n      };\n    case CHANGE_SORTEDCOLUMN:\n      return {\n        ...state,\n        sortedColumn: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <>{user.name}</>\n);\n\nUser.propTypes = { user: PropTypes.string.isRequired };\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport './index.css';\n\nconst TodoItem = ({ todo }) => (\n  <>\n    <td>{todo.id}</td>\n    <td>{todo.title}</td>\n    <td><User user={todo.user} /></td>\n    <td>{todo.completed ? 'completed' : 'not completed'}</td>\n  </>\n);\n\nTodoItem.propTypes = { todo: PropTypes.string.isRequired };\n\nexport default TodoItem;\n","const URLusers = 'https://jsonplaceholder.typicode.com/users';\nconst URLtodos = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const getUsers = async() => {\n  const response = await fetch(URLusers);\n\n  return response.json();\n};\n\nexport const getTodos = async() => {\n  const response = await fetch(URLtodos);\n\n  return response.json();\n};\n","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './index.css';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { getUsers, getTodos } from './ArrsAPI';\nimport {\n  createSet,\n  changeLoading,\n  changeLoaded,\n  changeError,\n  changeSortedColumn,\n} from './store';\n\nconst getTodosArr = async() => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId),\n  }));\n};\n\nconst TodoList = ({\n  todos,\n  setTodos,\n  setLoading,\n  setLoaded,\n  setError,\n  error,\n  isLoading,\n  loaded,\n  setSortedColumn,\n  sortedColumn,\n}) => {\n  const loadTodos = async() => {\n    try {\n      setLoading(true);\n\n      const readyTodos = await getTodosArr();\n\n      setTodos(readyTodos);\n      setLoading(false);\n      setLoaded(true);\n      setError(false);\n    } catch (e) {\n      setError(true);\n    }\n  };\n\n  const sortById = (a, b) => a.id - b.id;\n  const sortByTitle = (a, b) => a.title.localeCompare(b.title);\n  const sortbyName = (a, b) => a.user.name.localeCompare(b.user.name);\n  const sortByStatus = (a, b) => (a.completed > b.completed ? -1 : 1);\n\n  const sortHeader = (title, func) => {\n    const sortedTodos = [...todos].sort(func);\n\n    sortedColumn === title\n      ? setTodos([...todos].reverse())\n      : setTodos(sortedTodos);\n    setSortedColumn(title);\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div>\n      {todos.length === 0 && !error\n        && (\n          <button\n            type=\"button\"\n            onClick={loadTodos}\n          >\n            Load\n          </button>\n        )}\n      {isLoading && !error && <p>Loading...</p>}\n      {loaded && !isLoading && (\n        <table className=\"table\">\n          <thead>\n            <tr className=\"header\">\n              <th onClick={e => sortHeader(e.target.innerText, sortById)}>\n                ID\n              </th>\n              <th onClick={e => sortHeader(e.target.innerText, sortByTitle)}>\n                TITLE\n              </th>\n              <th onClick={e => sortHeader(e.target.innerText, sortbyName)}>\n                USER\n              </th>\n              <th onClick={e => sortHeader(e.target.innerText, sortByStatus)}>\n                STATUS\n              </th>\n              <th>DELETE</th>\n            </tr>\n          </thead>\n          <tbody>\n            {todos.map(todo => (\n              <tr className=\"row\">\n                <TodoItem todo={todo} />\n                <td>\n                  <button\n                    type=\"button\"\n                    onClick={() => deleteTodo(todo.id)}\n                    className=\"delete\"\n                  >\n                    x\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )\n      }\n      {error && (\n        <div>\n          Error occurred\n          <button\n            type=\"button\"\n            onClick={loadTodos}\n          >\n            Try again\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getExtraData = state => ({\n  todos: state.todos,\n  error: state.error,\n  isLoading: state.isLoading,\n  loaded: state.loaded,\n  sortedColumn: state.sortedColumn,\n});\n\nconst getExtraMethods = dispatch => ({\n  setTodos: newTodos => dispatch(createSet(newTodos)),\n  setLoading: value => dispatch(changeLoading(value)),\n  setLoaded: value => dispatch(changeLoaded(value)),\n  setError: value => dispatch(changeError(value)),\n  setSortedColumn: value => dispatch(changeSortedColumn(value)),\n});\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  setLoading: PropTypes.func.isRequired,\n  setLoaded: PropTypes.func.isRequired,\n  setError: PropTypes.func.isRequired,\n  error: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  setSortedColumn: PropTypes.func.isRequired,\n  sortedColumn: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  getExtraData,\n  getExtraMethods\n)(TodoList);\n","import React from 'react';\nimport './index.css';\nimport TodoList from './TodoList';\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Dynamic list of todos</h1>\n    <TodoList />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}