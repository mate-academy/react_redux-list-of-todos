{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/User.js","components/TodoItem.js","components/TodoItemHandler.js","components/TodoList.js","redux/selectors.js","components/TodoListHandler.js","App.js","serviceWorker.js","index.js"],"names":["TODOS_LOAD","USERS_LOAD","TODOS_RECEIVED","USERS_RECEIVED","REMOVE_ITEM","serverUrl","loadTodos","dispatch","type","fetch","concat","then","response","json","todoList","receiveTodos","loadUsers","userList","receiveUsers","payload","initialState","todoLoading","userLoading","User","props","react_default","a","createElement","className","href","email","name","TodoItem","id","title","completed","user","removeItem","key","components_User","defaultChecked","onClick","TodoItemHandler","connect","getDeleteAction","TodoList","todoMap","isLoading","isLoaded","itemsList","map","item","components_TodoItemHandler","Object","assign","disabled","selectTodoMap","createSelector","state","todos","users","todo","objectSpread","find","userId","selectIsLoading","selectIsLoaded","TodoListHandler","store","createStore","arguments","length","undefined","action","filter","applyMiddleware","thunk","App","es","components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec410d9f.chunk.js","sourcesContent":["export const TODOS_LOAD = 'todos_load';\nexport const USERS_LOAD = 'users_load';\n\nexport const TODOS_RECEIVED = 'todos_received';\nexport const USERS_RECEIVED = 'users_received';\n\nexport const REMOVE_ITEM = 'todo_delete';\n\nconst serverUrl = 'https://jsonplaceholder.typicode.com/';\n\nexport const setLoadTodos = () => {\n  return {\n    type: TODOS_LOAD\n  }\n}\n\nexport const setLoadUsers = () => {\n  return {\n    type: USERS_LOAD\n  }\n}\n\nexport const loadTodos = () => (dispatch) => {\n  dispatch(setLoadTodos());\n  fetch(`${serverUrl}todos`)\n    .then(response => response.json())\n    .then(todoList => {\n      dispatch(receiveTodos(todoList))\n    })\n};\n\nexport const loadUsers = () => (dispatch) => {\n  dispatch(setLoadUsers());\n  fetch(`${serverUrl}users`)\n    .then(response => response.json())\n    .then(userList => {\n      dispatch(receiveUsers(userList))\n    })\n};\n\nexport const receiveTodos = (todoList) => {\n  return {\n    type: TODOS_RECEIVED,\n    payload: todoList\n  }\n}\n\nexport const receiveUsers = (userList) => {\n  return {\n    type: USERS_RECEIVED,\n    payload: userList\n  }\n}\n\nexport function getDeleteAction(id) {\n  return {\n    type: REMOVE_ITEM,\n    id\n  };\n}\n","import {TODOS_LOAD, USERS_LOAD,\n  TODOS_RECEIVED, USERS_RECEIVED, REMOVE_ITEM} from './actions';\n\nconst initialState = {\n  todoLoading: false,\n  userLoading: false,\n\n  todoList: null,\n  userList: null\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case TODOS_LOAD:\n      return {\n        ...state,\n        todoLoading: true,\n        todoList: null,\n      };\n    case USERS_LOAD:\n      return {\n        ...state,\n        userLoading: true,\n        userList: null,\n      };\n    case TODOS_RECEIVED:\n      return {\n        ...state,\n        todoLoading: false,\n        todoList: action.payload\n      };\n    case USERS_RECEIVED:\n      return {\n        ...state,\n        userLoading: false,\n        userList: action.payload\n      };\n    case REMOVE_ITEM:\n      return {\n        ...state,\n        todoList: state.todoList.filter(item => item.id !== action.id)\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport './User.css';\n\nfunction User(props) {\n  return(\n      <td className='name'><a href = {`mailto:${props.email}`}>{props.name}</a></td>\n  )\n}\n\nexport default User;\n","import React from 'react';\nimport User from './User';\nimport './TodoItem.css';\n\nfunction TodoItem(props) {\n  const { id, title, email, completed, user, removeItem } = props;\n  return (\n    <tr key = {id}>\n      <td className='id'>{id}</td>\n      <td className='title'>{title}</td>\n    <User name={user.name} email={email} />\n      <td><input type=\"checkbox\" defaultChecked={completed} />\n      <button className='remove' onClick={() => removeItem(id)}>remove</button></td>\n    </tr>\n  );\n}\n\nexport default TodoItem;\n","import {connect} from 'react-redux';\nimport TodoItem from './TodoItem';\nimport {getDeleteAction} from '../redux/actions';\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeItem: (id) => dispatch(getDeleteAction(id))\n  }\n}\n\nconst TodoItemHandler = connect(\n  null,\n  mapDispatchToProps\n)(TodoItem);\n\nexport default TodoItemHandler;\n","import React from 'react';\nimport TodoItemHandler from './TodoItemHandler';\nimport './TodoList.css';\n\nfunction TodoList(props) {\n  const { todoMap, loadTodos, loadUsers, isLoading, isLoaded } = props;\n  if (isLoaded) {\n    const itemsList = todoMap.map(item => <TodoItemHandler {...item} key={item.id} />);\n    return (\n      <table className='todos'>\n        <thead>\n          <tr>\n            <th>id</th>\n            <th>Title</th>\n            <th>Author</th>\n            <th>Completed</th>\n          </tr>\n        </thead>\n        <tbody>\n          {itemsList}\n        </tbody>\n      </table>\n    );\n  }\n  return (\n    <button\n      className='load'\n      disabled={(isLoading) ? 'disabled' : ''}\n      onClick={() => {\n      loadTodos();\n      loadUsers();\n      }}>{(isLoading) ? 'Loading' : 'Load'}\n    </button>\n  );\n};\n\nexport default TodoList;\n","import { createSelector } from 'reselect';\n\nconst selectTodos = state => state.todoList;\nconst selectUsers = state => state.userList;\n\nexport const selectTodoMap = createSelector(selectTodos, selectUsers, (todos, users) => {\n  if(!todos || !users) {\n    return null;\n  }\n  return todos.map(todo => ({...todo,\n    user: users.find(user => user.id === todo.userId),\n  }));\n});\n\nexport const selectIsLoading = state => state.todoLoading || state.userLoading;\nexport const selectIsLoaded = state => state.todoList && state.userList;\n","import TodoList from './TodoList';\nimport {connect} from 'react-redux';\nimport {loadTodos, loadUsers} from '../redux/actions';\nimport {selectTodoMap, selectIsLoading, selectIsLoaded} from '../redux/selectors';\n\nfunction mapStateToProps(state) {\n  return {\n    isLoading: selectIsLoading(state),\n    isLoaded: selectIsLoaded(state),\n    todoMap: selectTodoMap(state)\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadTodos: () => dispatch(loadTodos()),\n    loadUsers: () => dispatch(loadUsers())\n  };\n}\n\nconst TodoListHandler = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default TodoListHandler;\n","import React from 'react';\nimport './App.css';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport {getNextState} from './redux/reducers';\nimport TodoListHandler from './components/TodoListHandler';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}