{"version":3,"sources":["TodoItem.js","TodoList.js","api.js","App.js","store.js","index.js"],"names":["connect","state","todos","dispatch","setTodos","newTodos","type","_ref","todo","react_default","a","createElement","id","title","user","name","completed","onClick","filter","item","className","map","src_TodoItem","getTodosFromServer","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsersFromServer","_context2","isLoading","buttonStatus","setIsLoading","status","setButtonStatus","_ref2","_ref3","users","preparedTodos","Promise","all","Object","slicedToArray","objectSpread2","find","userId","src_TodoList","store","createStore","action","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ab7a1bd7.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo, todos, setTodos }) => {\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(item => item.id !== id));\n  };\n\n  return (\n    <tr>\n      <td>{todo.id}</td>\n      <td>{todo.title}</td>\n      <td>{todo.user.name}</td>\n      {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\n      <td>{todo.completed ? <span>&#9989;</span> : <span>&#10060;</span>}</td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={() => deleteTodo(todo.id)}\n        >\n          <span>&#10008;</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst getData = state => ({\n  todos: state.todos,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n});\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    user: PropTypes.object,\n    completed: PropTypes.bool,\n  }).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(TodoItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos }) => (\n  <table className=\"pure-table pure-table-bordered\">\n    <thead>\n      <tr>\n        <td>Id</td>\n        <td>Title</td>\n        <td>User</td>\n        <td>Status</td>\n        <td>Delete task</td>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => <TodoItem todo={todo} />)}\n    </tbody>\n  </table>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst getData = state => ({\n  todos: state.todos,\n});\n\nexport default connect(getData)(TodoList);\n","const todosURL = 'https://jsonplaceholder.typicode.com/todos';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getTodosFromServer = async() => {\n  const response = await fetch(todosURL);\n\n  return response.json();\n};\n\nexport const getUsersFromServer = async() => {\n  const response = await fetch(usersURL);\n\n  return response.json();\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TodoList from './TodoList';\nimport { getTodosFromServer, getUsersFromServer } from './api';\n\nfunction App({\n  setTodos, isLoading, setIsLoading, buttonStatus, setButtonStatus,\n}) {\n  const handleLoading = async() => {\n    setIsLoading(true);\n\n    const [todos, users] = await Promise.all(\n      [getTodosFromServer(), getUsersFromServer()]\n    );\n\n    setIsLoading(false);\n    setButtonStatus(false);\n\n    const preparedTodos = todos.map(todo => ({\n      ...todo,\n      user: users.find(user => todo.userId === user.id),\n    }));\n\n    setTodos(preparedTodos);\n\n    return preparedTodos;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <h2 className=\"start-page\">Loading...</h2>\n      </div>\n    );\n  }\n\n  return buttonStatus\n    ? (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={handleLoading}\n        >\n          Load\n        </button>\n      </div>\n    ) : (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <TodoList />\n      </div>\n    );\n}\n\nconst getData = state => ({\n  isLoading: state.isLoading,\n  buttonStatus: state.buttonStatus,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n  setIsLoading: status => dispatch({\n    type: 'SET_LOADING',\n    isLoading: status,\n  }),\n  setButtonStatus: status => dispatch({\n    type: 'SET_BUTTON',\n    buttonStatus: status,\n  }),\n});\n\nApp.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n  buttonStatus: PropTypes.bool.isRequired,\n  setButtonStatus: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(App);\n","import { createStore } from 'redux';\n\nconst rootReduser = (state, action) => {\n  switch (action.type) {\n    case 'SET_TODOS':\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case 'SET_BUTTON':\n      return {\n        ...state,\n        buttonStatus: action.buttonStatus,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  buttonStatus: true,\n};\n\nconst store = createStore(rootReduser, initialState);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}