{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoList/index.js","components/App/App.js","store/store.js","components/App/index.js","index.js"],"names":["TodoItem","_ref","todo","react_default","a","createElement","className","completed","title","user","TodoList","todos","map","components_TodoItem_TodoItem","key","id","enhancedTodoList","connect","state","selectedSort","sortedTodos","App","getTodos","isLoading","sortTodos","isSorted","isLoaded","Fragment","type","value","onChange","e","target","onClick","ACTION_TYPES","ADD_TODOS","TOGGLE_LOADING","SWITCH_SORT","initialState","toggleLoading","payload","dispatch","Promise","all","fetch","then","_ref2","Object","slicedToArray","users","json","_ref3","_ref4","usersMap","reduce","acc","currentUser","_objectSpread","defineProperty","name","preparedTodos","userId","addTodos","store","createStore","arguments","length","undefined","action","toConsumableArray","sort","b","localeCompare","applyMiddleware","thunk","enhancedApp","ReactDOM","render","es","document","getElementById"],"mappings":"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","file":"static/js/main.b982c2e5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo }) => (\n  <div className={todo.completed\n    ? 'card text-white bg-success mb-3'\n    : 'card bg-light mb-3'}\n  >\n    <h2 className=\"card-header\">{todo.title}</h2>\n    <p className=\"cardbody mt-3\">\n      { todo.completed ? '\\u2714' : '\\u2718' }\n    </p>\n    <p>{todo.user}</p>\n  </div>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    user: PropTypes.string,\n  }).isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\nimport './TodoList.css';\n\nconst TodoList = ({ todos }) => (\n  <div className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem todo={todo} key={todo.id} />\n    ))}\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      id: PropTypes.number,\n      completed: PropTypes.bool,\n      user: PropTypes.string,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default TodoList;\n","import { connect } from 'react-redux';\nimport TodoList from './TodoList';\n\nconst enhancedTodoList = connect(\n  state => ({\n    todos: state.selectedSort === 'Do not sort'\n      ? state.todos\n      : state.sortedTodos,\n  }),\n)(TodoList);\n\nexport {\n  enhancedTodoList as TodoList,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { TodoList } from '../TodoList/index';\n\nconst App = ({\n  getTodos,\n  isLoading,\n  sortTodos,\n  isSorted,\n  selectedSort,\n  isLoaded,\n}) => (\n  <div className=\"App\">\n    <h1 className=\"title\">Dynamic list of todos</h1>\n    {(isLoaded && (\n      <>\n        Sort by:\n        {' '}\n        <select\n          type=\"button\"\n          value={selectedSort}\n          onChange={(e) => {\n            sortTodos(e.target.value);\n          }}\n          className=\"mb-3\"\n        >\n          <option value=\"Do not sort\">Do not sort</option>\n          <option value=\"By user name\">By user name</option>\n          <option value=\"By title\">By title</option>\n          <option value=\"TODO/Completed\">TODO/Completed</option>\n        </select>\n        <TodoList />\n      </>\n    ))\n      || (isLoading && (\n        <button type=\"button\">\n          loading...\n        </button>\n      ))\n      || (\n        <button type=\"button\" onClick={getTodos}>\n          Get todos\n        </button>\n      )\n    }\n  </div>\n);\n\nApp.propTypes = {\n  getTodos: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  sortTodos: PropTypes.func.isRequired,\n  isSorted: PropTypes.bool.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  selectedSort: PropTypes.string.isRequired,\n};\n\nexport default App;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst ACTION_TYPES = {\n  ADD_TODOS: 'ADD::TODOS',\n  TOGGLE_LOADING: 'TOGGLE::LOADING',\n  SWITCH_SORT: 'SWITCH::SORT',\n};\n\nconst initialState = {\n  todos: [],\n  sortedTodos: [],\n  isLoading: false,\n  isLoaded: false,\n  isSorted: false,\n  selectedSort: 'Do not sort',\n};\n\nexport const addTodos = todos => ({\n  type: ACTION_TYPES.ADD_TODOS,\n  payload: todos,\n});\n\nexport const toggleLoading = isLoading => ({\n  type: ACTION_TYPES.TOGGLE_LOADING,\n  payload: isLoading,\n});\n\nexport const sortTodos = value => ({\n  type: ACTION_TYPES.SWITCH_SORT,\n  payload: value,\n});\n\nexport const getTodos = () => (dispatch) => {\n  dispatch(toggleLoading(true));\n\n  Promise.all([\n    fetch('https://jsonplaceholder.typicode.com/todos'),\n    fetch('https://jsonplaceholder.typicode.com/users'),\n  ])\n    .then(([todos, users]) => Promise.all([todos.json(), users.json()]))\n    .then(([todos, users]) => {\n      const usersMap = users\n        .reduce((acc, currentUser) => ({\n          ...acc,\n          [currentUser.id]: currentUser.name,\n        }), {});\n\n      const preparedTodos = todos.map(todo => ({\n        ...todo,\n        user: usersMap[todo.userId],\n      }));\n\n      dispatch(addTodos(preparedTodos));\n      dispatch(toggleLoading('loaded'));\n    });\n};\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.ADD_TODOS: {\n      return {\n        ...state,\n        todos: [\n          ...action.payload,\n        ],\n        sortedTodos: [\n          ...action.payload,\n        ],\n      };\n    }\n\n    case ACTION_TYPES.TOGGLE_LOADING: {\n      return {\n        ...state,\n        isLoading: true,\n        isLoaded: action.payload === 'loaded',\n      };\n    }\n\n    case ACTION_TYPES.SWITCH_SORT: {\n      return {\n        ...state,\n        sortedTodos: [...state.todos].sort((a, b) => {\n          if (action.payload === 'By user name') {\n            return a.user.localeCompare(b.user);\n          }\n\n          if (action.payload === 'By title') {\n            return a.title.localeCompare(b.title);\n          }\n\n          if (action.payload === 'TODO/Completed') {\n            return a.completed ? 1 : -1;\n          }\n        }),\n        isSorted: action.payload !== 'Do not sort',\n        selectedSort: action.payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { getTodos, sortTodos } from '../../store/store';\n\nconst mapDispatchToProps = dispatch => ({\n  getTodos: () => dispatch(getTodos()),\n  sortTodos: value => dispatch(sortTodos(value)),\n});\n\nconst enhancedApp = connect(\n  state => ({\n    todos: state.todos,\n    sortedTodos: state.sortedTodos,\n    isLoading: state.isLoading,\n    isSorted: state.isSorted,\n    selectedSort: state.selectedSort,\n    isLoaded: state.isLoaded,\n  }),\n  mapDispatchToProps,\n)(App);\n\nexport {\n  enhancedApp as App,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { App } from './components/App/index';\nimport { store } from './store/store';\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n"],"sourceRoot":""}