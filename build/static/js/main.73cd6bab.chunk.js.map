{"version":3,"sources":["redux/store.js","TodoItem.js","TodoList.js","App.js","api/todos.js","api/users.js","index.js"],"names":["getTodos","todos","type","store","createStore","state","action","Object","objectSpread2","TodoItem","_ref","todo","react_default","a","createElement","Fragment","id","title","completed","userName","connect","dispatch","todosHandle","newTodos","sortTodos","column","sortData","toConsumableArray","sort","b","localeCompare","reverse","className","border","onClick","map","key","src_TodoItem","_useState","useState","_useState2","slicedToArray","isLoading","setLoading","length","src_TodoList","_ref2","_ref3","todosData","usersData","regenerator_default","async","_context","prev","next","t0","t1","Promise","awrap","fetch","then","response","json","t2","sent","t3","t4","t5","all","call","user","find","person","userId","name","stop","getDataFromServer","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.73cd6bab.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst GET_TODOS = 'get-todos';\n\nexport const getTodos = todos => ({\n  type: GET_TODOS,\n  todos,\n});\n\nconst initialState = {\n  todos: [],\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\n\nconst TodoItem = ({ todo }) => (\n  <>\n    <td>{todo.id}</td>\n    <td>{todo.title}</td>\n    <td>{todo.completed ? 'Yep' : 'Nope'}</td>\n    <td>{todo.userName}</td>\n  </>\n);\n\nTodoItem.propTypes = {\n  todo: PropsTypes.objectOf(PropsTypes.shape({\n    id: PropsTypes.number.isRequired,\n    title: PropsTypes.string.isRequired,\n    completed: PropsTypes.bool.isRequired,\n    useName: PropsTypes.string.isRequired,\n  })).isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getTodos } from './redux/store';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, todosHandle }) => {\n  const sortTodos = (column) => {\n    const sortData = [...todos].sort((a, b) => {\n      switch (typeof a[column]) {\n        case 'string':\n          return a[column].localeCompare(b[column]);\n        case 'number':\n        case 'boolean':\n          return a[column] - b[column];\n        default:\n          return 0;\n      }\n    });\n\n    if (sortData[0].id === todos[0].id) {\n      sortData.reverse();\n    }\n\n    todosHandle(sortData);\n  };\n\n  return (\n    <table\n      className=\"app__table\"\n      border={1}\n    >\n      <thead>\n        <tr>\n          <th onClick={() => sortTodos('id')}>â„–</th>\n          <th onClick={() => sortTodos('title')}>Todo</th>\n          <th onClick={() => sortTodos('completed')}>Completed</th>\n          <th onClick={() => sortTodos('userName')}>User Name</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <tr key={todo.title}>\n            <TodoItem todo={todo} />\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst getData = state => ({\n  todos: state.todos,\n});\n\nconst getMethods = dispatch => ({\n  todosHandle: newTodos => dispatch(getTodos(newTodos)),\n});\n\nTodoList.propTypes = {\n  todos: PropsTypes.arrayOf.isRequired,\n  todosHandle: PropsTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(TodoList);\n","import React, { useState } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport PropsTypes from 'prop-types';\nimport { getTodos } from './redux/store';\nimport { todosFromServer } from './api/todos';\nimport { usersFromServer } from './api/users';\n\nimport TodoList from './TodoList';\n\nconst App = ({ todos, todosHandle }) => {\n  const [isLoading, setLoading] = useState(false);\n\n  const getDataFromServer = async() => {\n    setLoading(true);\n\n    const [todosData, usersData] = await Promise.all(\n      [await todosFromServer(), await usersFromServer()]\n    );\n\n    todosHandle(todosData.map((todo) => {\n      const user = usersData.find(person => todo.userId === person.id);\n\n      return {\n        ...todo,\n        userName: user ? user.name : '',\n      };\n    }));\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>React + Redux list of TODOs</h1>\n      {todos.length\n        ? <TodoList />\n        : (\n          <button\n            type=\"button\"\n            className=\"todo__button\"\n            onClick={() => getDataFromServer()}\n          >\n            {isLoading\n              ? 'Loading...'\n              : 'Load'\n            }\n          </button>\n        )\n      }\n    </div>\n  );\n};\n\nconst getData = state => ({\n  todos: state.todos,\n});\n\nconst getMethods = dispatch => ({\n  todosHandle: newTodos => dispatch(getTodos(newTodos)),\n});\n\nApp.propTypes = {\n  todos: PropsTypes.arrayOf.isRequired,\n  todosHandle: PropsTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(App);\n","const URL_API = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const todosFromServer = () => (\n  fetch(URL_API).then(response => response.json())\n);\n","const URL_API = 'https://jsonplaceholder.typicode.com/users';\n\nexport const usersFromServer = () => (\n  fetch(URL_API)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}