{"version":3,"sources":["api/API_DATA.js","components/Comments.jsx","components/User.js","components/Post.js","components/SelectPost.jsx","components/PostsList.jsx","components/App.js","index.js"],"names":["loadPosts","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","responsePosts","posts","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","this","arguments","loadUsers","_ref2","_callee2","responseUsers","users","_context2","connect","dispatch","handleDelete","data","type","value","comment","react_default","createElement","className","console","log","title","onClick","commentId","User","userItem","name","username","email","Post","state","showComment","_this2","_this$props","props","post","currentComments","comments","filter","id","react_router_dom","to","concat","components_User","user","body","tabIndex","role","onKeyDown","setState","map","components_Comments","key","React","Component","SelectPost","errorsMap","handleFormSubmit","event","preventDefault","_this","keys","length","setComment","Date","now","handleChange","_this$setState","_event$target","target","defineProperty","_this$state","exact","onSubmit","htmlFor","placeholder","onChange","TodosList","postsWithUsers","_objectSpread","find","userId","setData","react_router","path","render","components_Post","match","components_SelectPost","params","initialState","persistedState","serialaizedState","localStorage","getItem","JSON","parse","e","loadFromLocalStorage","store","createStore","undefined","action","App_objectSpread","toConsumableArray","subscribe","stringify","setItem","saveToLocalStorage","getState","App","es","PostsList","ReactDOM","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.6b3e3965.chunk.js","sourcesContent":["\nexport const loadPosts = async() => {\n  const urlPosts = 'https://jsonplaceholder.typicode.com/posts';\n  const responsePosts = await fetch(urlPosts);\n  const posts = await responsePosts.json();\n\n  return posts;\n};\n\nexport const loadUsers = async() => {\n  const urlUsers = 'https://jsonplaceholder.typicode.com/users';\n  const responseUsers = await fetch(urlUsers);\n  const users = await responseUsers.json();\n\n  return users;\n};\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst getMethods = dispatch => ({\n  handleDelete: data => dispatch({\n    type: 'DELETE_COMMENT',\n    value: data,\n  }),\n});\n\nconst Comments = ({ comment, handleDelete }) => (\n  <div className=\"comments\">\n    <b> Unknown: </b>\n    {console.log(comment)}\n    <p className=\"comment\">{comment.title}</p>\n    <div\n      className=\"delete-comment\"\n      onClick={() => handleDelete(comment.commentId)}\n    >\n      {' '}\n      Delete\n    </div>\n  </div>\n);\n\nComments.propTypes = {\n  handleDelete: PropTypes.func,\n  comment: PropTypes.shape({\n    title: PropTypes.string,\n    commentId: PropTypes.number,\n  }).isRequired,\n};\n\nexport default connect(\n  null,\n  getMethods\n)(Comments);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ userItem }) => (\n  <div className=\"user_information\">\n    <p>\n      <b>Name</b>\n      {' '}\n      {userItem.name}\n    </p>\n    <p>\n      <b>Nick name</b>\n      {' '}\n      {userItem.username}\n    </p>\n    <p>\n      <b>Email</b>\n      {' '}\n      {userItem.email}\n    </p>\n  </div>\n);\n\nUser.propTypes = {\n  userItem: PropTypes.shape({\n    name: PropTypes.string,\n    username: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Comments from './Comments';\nimport User from './User';\n\nconst getData = state => ({\n  comments: state.comments,\n});\n\nclass Post extends React.Component {\n  state = {\n    showComment: false,\n  }\n\n  render() {\n    const { post, comments } = this.props;\n\n    const currentComments = comments\n      .filter(comment => +(comment.id) === post.id);\n\n    return (\n      <div>\n\n        <li\n          className=\"post_list\"\n        >\n          <Link\n            className=\"post_list-link\"\n            to={`/ViewPost/post/${post.id}`}\n          >\n            <User userItem={post.user} currentComments={currentComments} />\n\n            <p className=\"post_title\">\n              <b>Title</b>\n              {' '}\n              {post.title}\n            </p>\n\n            <p className=\"post_body\">{post.body}</p>\n\n          </Link>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onKeyDown={() => {}}\n            className=\"show_comments\"\n            onClick={() => this.setState(state => ({\n              showComment: !state.showComment,\n            }))}\n          >\n            <p className=\"view-comments\">\n              {this.state.showComment\n                ? 'Hide comments'\n                : 'View comments'}\n            </p>\n          </div>\n          {\n            this.state.showComment\n              ? currentComments.map(comment => (\n                <Comments key={comment.id} comment={comment} />))\n              : null\n          }\n        </li>\n      </div>\n    );\n  }\n}\n\nPost.propTypes = {\n  comments: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    commentId: PropTypes.number,\n  }).isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string,\n    title: PropTypes.string,\n    user: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(\n  getData,\n  null,\n)(Post);\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport React from 'react';\nimport User from './User';\nimport Comments from './Comments';\n\nconst getData = state => ({\n  posts: state.posts,\n  comments: state.comments,\n});\n\nconst getMethods = dispatch => ({\n  setComment: data => dispatch({\n    type: 'SET_COMMENT',\n    value: data,\n  }),\n});\n\nclass SelectPost extends React.Component {\n  state = {\n    title: '',\n    errorsMap: {\n      title: '',\n    },\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const errorsMap = {};\n\n    this.setState((state) => {\n      if (!state.title) {\n        errorsMap.title = 'Enter comment, please';\n      }\n\n      if (Object.keys(errorsMap).length > 0) {\n        return { errorsMap };\n      }\n\n      this.props.setComment({\n        id: this.props.id,\n        commentId: Date.now(),\n        title: this.state.title,\n      });\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  handleChange = (event) => {\n    event.preventDefault();\n\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n      errorsMap: {\n        title: '',\n      },\n    });\n  }\n\n  render() {\n    const { posts, id, comments } = this.props;\n    const { title, errorsMap } = this.state;\n    const currentComments = comments\n      .filter(comment => +(comment.id) === posts[id - 1].id);\n\n    return (\n      <div>\n        <Link to=\"/\" exact className=\"back-btn\">\n          Back to Posts\n        </Link>\n        <div className=\"selected-post_list\">\n          <User userItem={posts[id - 1].user} />\n          <p className=\"post_title\">\n            <b>Title</b>\n            {' '}\n            {posts[id - 1].title}\n          </p>\n          <p className=\"post_body\">{posts[id - 1].body}</p>\n\n          <p\n            className=\"post_comments\"\n          >\n            {currentComments.length }\n            {' '}\n            {currentComments.length < 2\n              ? 'Comment'\n              : 'Comments'\n            }\n          </p>\n          {currentComments.map(comment => (\n            <Comments key={comment.id} comment={comment} />\n          ))}\n        </div>\n\n        <form\n          onSubmit={this.handleFormSubmit}\n          className=\"form\"\n        >\n          <label htmlFor=\"form-input\">\n            <input\n              className=\"form-field_input\"\n              value={title}\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Enter comment\"\n              onChange={this.handleChange}\n            />\n          </label>\n          <div className=\"form-field_error\">\n            {errorsMap.title && (<div>{errorsMap.title}</div>)}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nSelectPost.propTypes = {\n  comments: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    commentId: PropTypes.number,\n  }).isRequired,\n  posts: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(\n  getData,\n  getMethods\n)(SelectPost);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Route, NavLink } from 'react-router-dom';\nimport { loadPosts, loadUsers } from '../api/API_DATA';\nimport Post from './Post';\nimport SelectPost from './SelectPost';\nimport '../style/App.css';\n\nconst getData = state => ({\n  posts: state.posts,\n});\n\nconst getMethods = dispatch => ({\n  setData: data => dispatch({\n    type: 'SET_DATA',\n    value: data,\n  }),\n});\n\nclass TodosList extends React.Component {\n  async componentDidMount() {\n    const users = await loadUsers();\n    const posts = await loadPosts();\n\n    const postsWithUsers = posts.map(post => ({\n      ...post,\n      user: users.find(user => user.id === post.userId),\n    }));\n\n    this.props.setData(postsWithUsers);\n  }\n\n  render() {\n    const { posts } = this.props;\n\n    return (\n      <div>\n        <NavLink to=\"/\" exact />\n\n        <div className=\"App\">\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <div>\n                {posts.map(post => (\n                  <div>\n                    <Post post={post} />\n                  </div>\n                ))}\n              </div>\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/ViewPost/post/:id?\"\n            render={({ match }) => (posts\n              ? (\n                <SelectPost\n                  id={match.params.id}\n                />\n              )\n              : null)\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nTodosList.propTypes = {\n  posts: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(\n  getData,\n  getMethods\n)(TodosList);\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport PostsList from './PostsList';\n\nconst initialState = {\n  posts: [],\n  comments: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_DATA':\n      return {\n        ...state,\n        posts: action.value,\n      };\n\n    case 'SET_COMMENT':\n      return {\n        ...state,\n        comments: [\n          ...state.comments,\n          action.value,\n        ],\n      };\n\n    case 'DELETE_COMMENT':\n      return {\n        ...state,\n        comments: state.comments\n          .filter(comment => comment.commentId !== action.value),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst saveToLocalStorage = (state) => {\n  try {\n    const serialaizedState = JSON.stringify(state);\n\n    localStorage.setItem('state', serialaizedState);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst loadFromLocalStorage = () => {\n  try {\n    const serialaizedState = localStorage.getItem('state');\n\n    if (serialaizedState === null) { return undefined; }\n\n    return JSON.parse(serialaizedState);\n  } catch (e) {\n    console.log(e);\n\n    return undefined;\n  }\n};\n\nconst persistedState = loadFromLocalStorage();\n\nconst store = createStore(\n  reducer,\n  persistedState,\n);\n\nstore.subscribe(() => saveToLocalStorage(store.getState()));\n\nconst App = () => (\n  <Provider store={store}>\n    <PostsList />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}