{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","store.js","index.js"],"names":["connect","state","todos","dispatch","setTodos","newTodos","type","_ref","todo","react_default","a","createElement","id","title","completed","user","name","onClick","filter","item","selectedSort","setSelectedSort","sortTableBy","sortType","sortedTodos","Object","toConsumableArray","sort","b","localeCompare","toString","reverse","className","style","cursor","map","src_TodoItem","getTodosFromServer","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsersFromServer","_context2","isLoading","buttonStatus","setIsLoading","status","setButtonStatus","_ref2","_ref3","users","preparedTodos","_context3","Promise","all","slicedToArray","objectSpread2","find","userId","src_TodoList","store","createStore","action","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6f4e1595.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst TodoItem = ({ todo, todos, setTodos }) => {\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(item => item.id !== id));\n  };\n\n  return (\n    <tr>\n      <th>{todo.id}</th>\n      <th>{todo.title}</th>\n      <th>{todo.completed ? '✅' : '❌'}</th>\n      <th>{todo.user.name}</th>\n      <td>\n        <button\n          type=\"button\"\n          onClick={() => deleteTodo(todo.id)}\n        >\n          <span>&#128465;</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst getData = state => ({\n  todos: state.todos,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n});\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    user: PropTypes.object,\n    completed: PropTypes.bool,\n  }).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(TodoItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, setTodos, selectedSort, setSelectedSort }) => {\n  const sortTableBy = (sortType) => {\n    let sortedTodos = [];\n\n    switch (sortType) {\n      case 'id':\n        sortedTodos = [...todos].sort((a, b) => a.id - b.id);\n        break;\n      case 'title':\n        sortedTodos = [...todos].sort((a, b) => a.title.localeCompare(b.title));\n        break;\n      case 'user':\n        sortedTodos = [...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name));\n        break;\n      case 'completed':\n        sortedTodos = [...todos]\n          .sort((a, b) => b.completed.toString().localeCompare(\n            a.completed.toString()\n          ));\n        break;\n      default:\n    }\n\n    selectedSort === sortType\n      ? setTodos([...todos].reverse())\n      : setTodos(sortedTodos);\n    setSelectedSort(sortType);\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th\n              className=\"title\"\n              style={{ cursor: 'pointer' }}\n              onClick={() => sortTableBy('id')}\n            >\n              Sort by Id\n            </th>\n            <th\n              className=\"title\"\n              style={{ cursor: 'pointer' }}\n              onClick={() => sortTableBy('title')}\n            >\n              Sort by Title\n            </th>\n            <th\n              className=\"title\"\n              style={{ cursor: 'pointer' }}\n              onClick={() => sortTableBy('completed')}\n            >\n              Sort if is completed\n            </th>\n            <th\n              className=\"title\"\n              style={{ cursor: 'pointer' }}\n              onClick={() => sortTableBy('user')}\n            >\n              Sort by Name\n            </th>\n            <th className=\"title\">Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(todo => (\n\n            <TodoItem todo={todo} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  selectedSort: PropTypes.string.isRequired,\n  setSelectedSort: PropTypes.func.isRequired,\n};\n\nconst getData = state => ({\n  todos: state.todos,\n  selectedSort: state.selectedSort,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n  setSelectedSort: type => dispatch({\n    type: 'SET_SORT_TYPE',\n    selectedSort: type,\n  }),\n});\n\nexport default connect(getData, getMethods)(TodoList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TodoList from './TodoList';\n\nconst todosURL = 'https://jsonplaceholder.typicode.com/todos';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nconst getTodosFromServer = async() => {\n  const response = await fetch(todosURL);\n\n  return response.json();\n};\n\nconst getUsersFromServer = async() => {\n  const response = await fetch(usersURL);\n\n  return response.json();\n};\n\nfunction App({\n  setTodos, isLoading, setIsLoading, buttonStatus, setButtonStatus,\n}) {\n  const handleLoading = async() => {\n    setIsLoading(true);\n\n    const [todos, users] = await Promise.all(\n      [getTodosFromServer(), getUsersFromServer()]\n    );\n\n    setIsLoading(false);\n    setButtonStatus(false);\n\n    const preparedTodos = todos.map(todo => ({\n      ...todo,\n      user: users.find(user => todo.userId === user.id),\n    }));\n\n    setTodos(preparedTodos);\n\n    return preparedTodos;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <h2 className=\"start-page\">Loading...</h2>\n      </div>\n    );\n  }\n\n  return buttonStatus\n    ? (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={handleLoading}\n        >\n          Load\n        </button>\n      </div>\n    ) : (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <TodoList />\n      </div>\n    );\n}\n\nconst getData = state => ({\n  isLoading: state.isLoading,\n  buttonStatus: state.buttonStatus,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n  setIsLoading: status => dispatch({\n    type: 'SET_LOADING',\n    isLoading: status,\n  }),\n  setButtonStatus: status => dispatch({\n    type: 'SET_BUTTON',\n    buttonStatus: status,\n  }),\n});\n\nApp.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n  buttonStatus: PropTypes.bool.isRequired,\n  setButtonStatus: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(App);\n","import { createStore } from 'redux';\n\nconst rootReduser = (state, action) => {\n  switch (action.type) {\n    case 'SET_TODOS':\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case 'SET_BUTTON':\n      return {\n        ...state,\n        buttonStatus: action.buttonStatus,\n      };\n    case 'SET_SORT_TYPE':\n      return {\n        ...state,\n        selectedSort: action.selectedSort,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  buttonStatus: true,\n  selectedSort: 'id',\n};\n\nconst store = createStore(rootReduser, initialState);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}