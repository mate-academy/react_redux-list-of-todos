{"version":3,"sources":["store.js","User.js","TodoItem.js","TodoList.js","getDataApi.js","App.js","index.js"],"names":["titles","getFullTodos","state","fullTodos","getSortingTitle","sortingTitle","store","createStore","action","type","Object","objectSpread2","value","User","_ref","user","react_default","a","createElement","name","TodoItem","todo","removeTodo","map","title","key","concat","id","completed","src_User","className","onClick","connect","setSortBy","toUpperCase","cn","table__heading--selected","src_TodoItem","getDataFromServer","URL","fetch","then","response","json","getTodosWithUsers","todos","users","find","person","userId","dispatch","setFullTodos","newFullTodos","setSortingTitle","newSortingTitle","_useState","useState","_useState2","slicedToArray","isLoading","setLoading","_useState3","_useState4","isError","setError","loadTodosFromServer","_ref2","_ref3","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","t0","stop","length","src_TodoList","toConsumableArray","reverse","sort","firstTodo","secondTodo","localeCompare","Number","filter","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1c216acb.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nexport const todosURL = 'https://jsonplaceholder.typicode.com/todos';\nexport const usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const titles = ['id', 'title', 'completed', 'user', 'remove'];\n\nexport const getFullTodos = state => state.fullTodos;\nexport const getSortingTitle = state => state.sortingTitle;\n\nconst initialState = {\n  fullTodos: [],\n  sortingTitle: '',\n};\n\nexport const SET_FULL_TODOS = 'setFullTodos';\nexport const SET_SORTING_TITLE = 'setSortingTitle';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_FULL_TODOS:\n      return {\n        ...state,\n        fullTodos: action.value,\n      };\n    case SET_SORTING_TITLE:\n      return {\n        ...state,\n        sortingTitle: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <td>{user.name}</td>\n);\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { titles } from './store';\nimport User from './User';\n\nconst TodoItem = ({ todo, removeTodo }) => (\n  <tr>\n    {titles.map((title) => {\n      switch (title) {\n        case 'completed':\n          return (\n            <td key={`${title}${todo.id}`}>{todo.completed ? '+' : '-'}</td>\n          );\n        case 'user':\n          return <User key={`${title}${todo.id}`} user={todo.user} />;\n        case 'remove':\n          return (\n            <td key={`${title}${todo.id}`}>\n              <button\n                type=\"button\"\n                className=\"table__remove-button\"\n                onClick={() => {\n                  removeTodo(todo.id);\n                }}\n              >\n                x\n              </button>\n            </td>\n          );\n        default:\n          return (<td key={`${title}${todo.id}`}>{todo[title]}</td>);\n      }\n    })}\n  </tr>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport cn from 'classnames';\nimport TodoItem from './TodoItem';\nimport { getFullTodos, getSortingTitle, titles } from './store';\n\nconst TodoList = ({ fullTodos, sortingTitle, setSortBy, removeTodo }) => (\n  <table className=\"todo-list__table\">\n    <thead>\n      <tr>\n        {titles.map((title) => {\n          switch (title) {\n            case 'remove':\n              return (\n                <th\n                  key={title}\n                  className=\"table__heading\"\n                >\n                  {title.toUpperCase()}\n                </th>\n              );\n            default:\n              return (\n                <th\n                  key={title}\n                  onClick={() => setSortBy(title)}\n                  className={cn(\n                    'table__heading',\n                    'table__heading--sortable',\n                    { 'table__heading--selected': title === sortingTitle }\n                  )}\n                >\n                  {title.toUpperCase()}\n                </th>\n              );\n          }\n        })}\n      </tr>\n    </thead>\n    <tbody>\n      {fullTodos.map(todo => (\n        <TodoItem key={todo.id} todo={todo} removeTodo={removeTodo} />\n      ))}\n    </tbody>\n  </table>\n);\n\nTodoList.propTypes = {\n  fullTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    user: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  })).isRequired,\n  sortingTitle: PropTypes.string.isRequired,\n  setSortBy: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  fullTodos: getFullTodos(state),\n  sortingTitle: getSortingTitle(state),\n});\n\nexport default connect(mapStateToProps)(TodoList);\n","const getDataFromServer = URL => (\n  fetch(URL).then(response => response.json())\n);\n\nexport default getDataFromServer;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TodoList from './TodoList';\nimport getDataFromServer from './getDataApi';\nimport { todosURL, usersURL, SET_SORTING_TITLE, SET_FULL_TODOS,\n  getFullTodos, getSortingTitle } from './store';\n\nconst getTodosWithUsers = (todos, users) => (\n  todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }))\n);\n\nconst App = ({ fullTodos, sortingTitle,\n  setFullTodos, setSortingTitle }) => {\n  const [isLoading, setLoading] = useState(false);\n  const [isError, setError] = useState(false);\n\n  const loadTodosFromServer = async() => {\n    try {\n      setError(false);\n      setLoading(true);\n\n      const [todos, users] = await Promise.all(\n        [getDataFromServer(todosURL), getDataFromServer(usersURL)]\n      );\n\n      setFullTodos(getTodosWithUsers(todos, users));\n    } catch {\n      setError(true);\n      setFullTodos([]);\n    }\n\n    setLoading(false);\n  };\n\n  const setSortBy = (title) => {\n    if (sortingTitle === title) {\n      setFullTodos([...fullTodos].reverse());\n    } else if (title === 'user') {\n      setFullTodos([...fullTodos]\n        .sort((firstTodo, secondTodo) => (\n          firstTodo.user.name.localeCompare(secondTodo.user.name)\n        )));\n    } else {\n      setFullTodos([...fullTodos].sort((firstTodo, secondTodo) => {\n        switch (typeof firstTodo[title]) {\n          case 'string':\n            return firstTodo[title].localeCompare(secondTodo[title]);\n          case 'boolean':\n            return Number(secondTodo[title]) - Number(firstTodo[title]);\n          default:\n            return firstTodo[title] - secondTodo[title];\n        }\n      }));\n    }\n\n    setSortingTitle(title);\n  };\n\n  const removeTodo = (id) => {\n    setFullTodos(fullTodos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div className=\"todo-list\">\n      {fullTodos.length === 0 && !isError && !isLoading && (\n        <button\n          type=\"button\"\n          className=\"todo-list__button\"\n          onClick={loadTodosFromServer}\n        >\n          Load Todos\n        </button>\n      )}\n\n      {isLoading && (<p className=\"todo-list__loading-text\">Loading...</p>)}\n\n      {fullTodos.length === 0 && isError && !isLoading && (\n        <button\n          type=\"button\"\n          className=\"todo-list__button\"\n          onClick={loadTodosFromServer}\n        >\n          Try again\n        </button>\n      )}\n      {fullTodos.length > 0\n        && (\n          <TodoList\n            setSortBy={setSortBy}\n            removeTodo={removeTodo}\n          />\n        )}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  fullTodos: getFullTodos(state),\n  sortingTitle: getSortingTitle(state),\n});\n\nconst getExtraMethods = dispatch => ({\n  setFullTodos: newFullTodos => dispatch({\n    type: SET_FULL_TODOS,\n    value: newFullTodos,\n  }),\n  setSortingTitle: newSortingTitle => dispatch({\n    type: SET_SORTING_TITLE,\n    value: newSortingTitle,\n  }),\n});\n\nApp.propTypes = {\n  fullTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.boolean,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  })).isRequired,\n  setFullTodos: PropTypes.func.isRequired,\n  sortingTitle: PropTypes.string.isRequired,\n  setSortingTitle: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, getExtraMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}