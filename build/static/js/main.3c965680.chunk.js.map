{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/User.js","components/TodoItem.js","components/TodoItemHandler.js","components/TodoList.js","components/TodoListHandler.js","App.js","serviceWorker.js","index.js"],"names":["REMOVE_ITEM","LOAD_DATA","DISPLAY","SORT","loadData","dispatch","type","data","Promise","all","fetch","then","response","json","todos","users","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","todoItem","value","tableRowItem","completed","user","find","id","userId","title","author","name","email","push","_iterator","Symbol","iterator","next","done","err","return","display","initialState","requested","User","props","react_default","a","createElement","href","TodoItem","key","components_User","onClick","removeItem","TodoItemHandler","connect","state","ownProps","item","removeClicked","TodoList","_this","this","itemsList","components_TodoItemHandler","className","event","sort","target","innerText","getData","React","Component","TodoListHandler","headerTitle","store","createStore","arguments","length","action","Object","objectSpread","filter","index","newItems","toConsumableArray","b","toLowerCase","localeCompare","applyMiddleware","thunk","App","es","components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c965680.chunk.js","sourcesContent":["export const REMOVE_ITEM = 'remove_item';\nexport const LOAD_DATA = 'load_data';\nexport const DISPLAY = 'display';\nexport const SORT = 'sort';\n\nexport function removeClicked(id) {\n  return {\n    type: REMOVE_ITEM,\n    id,\n  }\n}\n\nexport function loadData() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_DATA\n    });\n\n    const requests = ['todos', 'users'];\n    const data = {};\n\n    Promise.all([\n      fetch('https://jsonplaceholder.typicode.com/todos').\n        then(response => response.json()),\n      fetch('https://jsonplaceholder.typicode.com/users').\n        then(response => response.json())\n    ]).then(response => {\n      data.todos = response[0];\n      data.users = response[1];\n      \n      const items = [];\n        for (const todoItem of data.todos) {\n          const tableRowItem = {};\n          tableRowItem.completed = todoItem.completed ? 'completed' : 'not completed'\n          const user = data.users.find(user => user.id === todoItem.userId);\n          tableRowItem.id = todoItem.id;\n          tableRowItem.title = todoItem.title;\n          tableRowItem.author = user.name;\n          tableRowItem.email = user.email;\n          items.push(tableRowItem);\n        }\n      dispatch(display(items));\n    });\n  }\n}\n\nexport function display(data) {\n  return {\n    type: DISPLAY,\n    data,\n  }\n}\n\nexport function sort(data) {\n  return {\n    type: SORT,\n    data,\n  }\n}\n","import { REMOVE_ITEM, LOAD_DATA, DISPLAY, SORT } from './actions';\n\nconst initialState = {\n  items: null,\n  requested: false,\n}\n\nexport function reducer(state = initialState, action) {\n  switch(action.type) {\n    case REMOVE_ITEM:\n      return {\n        ...state,\n        items: state.items.filter((item, index) => action.id !== item.id)\n      };\n    case LOAD_DATA: \n      return {\n      ...state,\n        requested: true\n    }\n    case DISPLAY:\n      return {\n        ...state,\n        items: action.data\n      };\n    case SORT:\n      let newItems = [...state.items];\n      \n      if (action.data === 'Title' || action.data === 'Author' || action.data === 'Completed') {\n        newItems.sort((a,b) => a[action.data.toLowerCase()].localeCompare(b[action.data.toLowerCase()]));\n      } else {\n        newItems.sort((a,b) => a.id - b.id);\n      }\n\n      return {\n        ...state,\n        items: newItems\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nfunction User(props) {\n  return(\n      <td><a href = {'mailto:' + props.email}>{props.name}</a></td>\n  )\n}\n\nexport default User;\n","import React from 'react';\r\nimport User from './User';\r\n\r\nfunction TodoItem(props) {\r\n  let key = 0;\r\n  key++;\r\n  return(\r\n    <tr key = {key}>\r\n      <td>{props.id}</td>\r\n      <td>{props.title}</td>\r\n      <User name = {props.author} email = {props.email}/>\r\n      <td>{props.completed}\r\n        <button onClick={() => props.removeItem(props.id)}>remove</button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default TodoItem;\r\n","import {connect} from 'react-redux';\r\nimport TodoItem from './TodoItem';\r\nimport {removeClicked} from \"../redux/actions\";\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    id: ownProps.item.id,\r\n    title: ownProps.item.title,\r\n    author: ownProps.item.author,\r\n    email: ownProps.item.email,\r\n    completed: ownProps.item.completed\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    removeItem: (id) => dispatch(removeClicked(id))\r\n  }\r\n}\r\n\r\nconst TodoItemHandler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoItem);\r\n\r\nexport default TodoItemHandler;\r\n","import React from 'react';\nimport TodoItemHandler from './TodoItemHandler';\n\nclass TodoList extends React.Component {\n\n  render() {\n    if(this.props.requested) {\n      if (this.props.items) {\n        const itemsList = [];\n\n        for(let item of this.props.items) {\n          itemsList.push(<TodoItemHandler key={item.id} item={item}/>)\n        }\n        \n        return (\n          <table className='table'>\n            <thead>\n              <tr onClick = {event => this.props.sort(event.target.innerText)}>\n                <th>id</th>\n                <th>Title</th>\n                <th>Author</th>\n                <th>Completed</th>\n              </tr>\n            </thead>\n            <tbody>\n              {itemsList}\n            </tbody>\n          </table>\n         );\n      } else {\n        return 'Loading...'\n      }\n    } else {\n      return <button onClick={this.props.getData}>Load</button>\n    }\n  \n  }\n}\n\n  export default TodoList;\n","import {connect} from 'react-redux';\r\nimport {loadData, sort} from '../redux/actions';\r\nimport TodoList from './TodoList';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    items: state.items,\r\n    requested: state.requested\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getData: () => dispatch(loadData()),\r\n    sort: (headerTitle) => dispatch(sort(headerTitle))\r\n  }\r\n}\r\n\r\nconst TodoListHandler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);\r\n\r\nexport default TodoListHandler;\r\n","import React from 'react';\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport {reducer} from './redux/reducers';\r\nimport {Provider} from 'react-redux';\r\nimport TodoListHandler from './components/TodoListHandler';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <TodoListHandler/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}