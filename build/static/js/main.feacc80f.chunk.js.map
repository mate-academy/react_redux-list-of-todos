{"version":3,"sources":["redux/actions.js","redux/reducers.js","Components/User.js","Components/TodoItem.js","Components/TodoList.js","Components/TodoListHandler.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_USER","LOAD_TODO","DISPLAY","DISPLAY_TODOS","REMOVE","loadUser","dispatch","type","xhr","XMLHttpRequest","open","responseType","addEventListener","users","response","display","send","loadTodos","todos","displayTodos","initialState","requested","requestedUsers","User","props","react_default","a","createElement","className","href","user","email","name","TodoItem","style","item","completed","background","title","onClick","remove","index","TodoList","map","Components_User","id","userId","Components_TodoItem","removeItem","TodoListHandler","connect","state","store","createStore","arguments","length","undefined","action","Object","objectSpread","filter","applyMiddleware","thunk","App","es","Components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.feacc80f.chunk.js","sourcesContent":["export const LOAD_USER = 'load user';\nexport const LOAD_TODO = 'load todo';\nexport const DISPLAY = 'display';\nexport const DISPLAY_TODOS = 'display todos';\nexport const REMOVE = 'remove item';\n\nexport function loadUser() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_USER,\n    });\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://jsonplaceholder.typicode.com/users');\n    xhr.responseType = 'json';\n    xhr.addEventListener('load', () => {\n      const users = xhr.response;\n      dispatch(display(users));\n    });\n    xhr.send();\n  };\n}\n\nexport function display(users) {\n  return {\n    type: DISPLAY,\n    users,\n  };\n}\n\nexport function loadTodos() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_TODO,\n    });\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://jsonplaceholder.typicode.com/todos');\n    xhr.responseType = 'json';\n    xhr.addEventListener('load', () => {\n      const todos = xhr.response;\n      dispatch(displayTodos(todos));\n    });\n    xhr.send();\n  };\n}\n\nexport function displayTodos(todos) {\n  return {\n    type: DISPLAY_TODOS,\n    todos,\n  };\n}\n\nexport function removeItem(index) {\n  return {\n    type: REMOVE,\n    index,\n  };\n}\n","import {\n  DISPLAY,\n  LOAD_USER,\n  LOAD_TODO,\n  DISPLAY_TODOS,\n  REMOVE,\n} from './actions';\n\nconst initialState = {\n  requested: false,\n  requestedUsers: false,\n  users: null,\n  todos: null,\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_USER:\n      return {\n        ...state,\n        requestedUsers: true,\n      };\n    case DISPLAY:\n      return {\n        ...state,\n        users: action.users,\n      };\n    case LOAD_TODO:\n      return {\n        ...state,\n        requested: true,\n      };\n    case DISPLAY_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case REMOVE:\n      return {\n        ...state,\n        todos: state.todos.filter((item, index) => {\n          return index !== action.index;\n        }),\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nfunction User(props) {\n  return (\n    <div className='user'>\n      <a href={\"mailto:\" + props.user.email}> {props.user.name} </a>\n    </div>\n  );\n}\n\nexport default User;\n","import React from 'react';\nimport './TodoItem.css';\n\nfunction TodoItem(props) {\n  return (\n    <div\n      className=\"item\"\n      style={props.item.completed\n        ? { background: 'rgba(69, 169, 21, 0.15)' }\n        : { background: 'rgba(253, 106, 96, 0.29)' }}\n    >\n      <span className=\"title\">{props.item.title}</span>\n      <span className=\"progress\">\n        {props.item.completed ? 'Completed' : 'In progress'}\n      </span>\n      <a\n        href=\"#?\"\n        className=\"remove\"\n        onClick={() => props.remove(props.index)}\n      >\n        &times;\n      </a>\n    </div>\n  );\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport User from './User';\nimport TodoItem from './TodoItem';\nimport './TodoList.css';\n\nfunction TodoList(props) {\n  if (!props.requestedUsers) {\n    return (\n      <button\n        onClick={() => props.loadUser()}\n        type=\"button\"\n        className=\"load\"\n      >\n        Load List of Users\n      </button>\n    );\n  }\n  if (props.users === null) {\n    return <span>Loading ...</span>;\n  } if (!props.requested) {\n    return (\n      props.users.map(item => (\n        <div className=\"userBlock\">\n          <User user={item} />\n          <button onClick={() => props.loadTodos()} type=\"button\" className=\"loadTodo\">\n            Load Todo Items\n          </button>\n        </div>\n      )));\n  }\n  if (props.todos === null) {\n    return <span>Loading ...</span>;\n  }\n  return (\n    props.users.map(user => (\n      <div className=\"userBlock\">\n        <User user={user} />\n        {props.todos.map((item, index) => {\n          if (user.id === item.userId) {\n            return (\n              <TodoItem\n                item={item}\n                index={index}\n                remove={() => props.removeItem(index)}\n              />\n            );\n          }\n        })}\n      </div>\n    ))\n  );\n}\n\nexport default TodoList;\n","import { connect } from 'react-redux';\nimport TodoList from './TodoList';\nimport {\n  loadUser,\n  loadTodos,\n  removeItem,\n} from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    requestedUsers: state.requestedUsers,\n    requested: state.requested,\n    users: state.users,\n    todos: state.todos,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadUser: () => dispatch(loadUser()),\n    loadTodos: () => dispatch(loadTodos()),\n    removeItem: index => dispatch(removeItem(index)),\n  };\n}\n\nconst TodoListHandler = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default TodoListHandler;\n","import React from 'react';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { getNextState } from './redux/reducers';\nimport TodoListHandler from './Components/TodoListHandler';\n\nconst store = createStore(getNextState, applyMiddleware(thunk))\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}